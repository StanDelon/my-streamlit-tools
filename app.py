import streamlit as st
import pandas as pd
from prophet import Prophet
import plotly.graph_objects as go
from datetime import datetime
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ CSV
def create_download_link():
    csv = '''date,clicks,cost,conversions
2023-01-01,100,5000,15
2023-01-02,120,5500,18
2023-01-03,130,6000,20'''
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="template.csv">–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV</a>'
    return href

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.markdown(create_download_link(), unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])

df = None

if uploaded_file is not None:
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        df = pd.read_csv(uploaded_file)
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π
        date_cols = [col for col in df.columns if any(x in col.lower() for x in ['date', 'time', 'day', 'ds'])]
        
        if not date_cols:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–∞–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'date')")
            st.stop()
        
        date_col = date_cols[0]
        try:
            df[date_col] = pd.to_datetime(df[date_col])
        except:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É '{date_col}' –≤ –¥–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç.")
            st.stop()
        
        # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = []
        for col in df.columns:
            if col != date_col:
                try:
                    df[col] = pd.to_numeric(df[col])
                    numeric_cols.append(col)
                except:
                    continue
        
        if not numeric_cols:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            st.stop()
        
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:", df.head())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        metric_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", numeric_cols)
        forecast_period = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 365, 30)
        seasonality_mode = st.selectbox("–†–µ–∂–∏–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", ["additive", "multiplicative"])
        
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                prophet_df = df[[date_col, metric_col]].copy()
                prophet_df.columns = ['ds', 'y']
                prophet_df = prophet_df.dropna()
                
                if len(prophet_df) < 10:
                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 10 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.")
                    st.stop()
                
                # –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                model = Prophet(seasonality_mode=seasonality_mode)
                model.fit(prophet_df)
                future = model.make_future_dataframe(periods=forecast_period)
                forecast = model.predict(future)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É Plotly
                fig = go.Figure()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ (–ª–∏–Ω–∏—è)
                fig.add_trace(go.Scatter(
                    x=forecast['ds'],
                    y=forecast['yhat'],
                    name='–ü—Ä–æ–≥–Ω–æ–∑',
                    line=dict(color='blue', width=2)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ—á–∫–∏)
                fig.add_trace(go.Scatter(
                    x=prophet_df['ds'],
                    y=prophet_df['y'],
                    name='–§–∞–∫—Ç',
                    mode='markers',
                    marker=dict(color='red', size=5)
                )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
                fig.update_layout(
                    title=f'–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ "{metric_col}"',
                    xaxis_title='–î–∞—Ç–∞',
                    yaxis_title=metric_col,
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                fig_components = model.plot_components(forecast)
                st.pyplot(fig_components)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω –≤—ã—à–µ)")
