import streamlit as st
import pandas as pd
from prophet import Prophet
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import base64
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")

# --- 1. –®–∞–±–ª–æ–Ω CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
def create_download_link():
    template = """date,clicks,cost,conversions,impressions,ctr
2024-01-01,150,5000,20,1000,15.0
2024-01-02,180,6000,25,1200,15.0"""
    b64 = base64.b64encode(template.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="template.csv">–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV</a>'
    return href

st.sidebar.markdown(create_download_link(), unsafe_allow_html=True)

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["CSV", "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç", "CallTouch"]
)

df = None

if data_source == "CSV":
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file)
            df['date'] = pd.to_datetime(df['date'])
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:", df.head())
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

elif data_source == "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç":
    st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
    yandex_token = st.sidebar.text_input("OAuth-—Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å")
    client_id = st.sidebar.text_input("ID –∫–ª–∏–µ–Ω—Ç–∞")
    date_from = st.sidebar.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime.now() - timedelta(days=30))
    date_to = st.sidebar.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.now())

    if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"):
        if yandex_token and client_id:
            url = "https://api.direct.yandex.com/json/v5/reports"
            headers = {
                "Authorization": f"Bearer {yandex_token}",
                "Client-Login": client_id,
                "Accept-Language": "ru"
            }
            body = {
                "params": {
                    "SelectionCriteria": {
                        "DateFrom": date_from.strftime("%Y-%m-%d"),
                        "DateTo": date_to.strftime("%Y-%m-%d")
                    },
                    "FieldNames": ["Date", "Clicks", "Cost", "Impressions", "Conversions"],
                    "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
                    "DateRangeType": "CUSTOM_DATE",
                    "Format": "TSV",
                    "IncludeVAT": "YES"
                }
            }
            response = requests.post(url, headers=headers, json=body)
            if response.status_code == 200:
                data = response.text.split("\n")
                df = pd.read_csv(io.StringIO("\n".join(data[1:-2])), sep="\t")
                df['Date'] = pd.to_datetime(df['Date'])
                st.success("–î–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ API: {response.text}")

# --- 3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
if df is not None:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    if not numeric_cols:
        st.error("–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    else:
        metric_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", numeric_cols)
        date_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π", df.select_dtypes(include=['datetime64']).columns.tolist())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_period = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏)", 1, 365, 30)
        seasonality_mode = st.selectbox("–†–µ–∂–∏–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", ["additive", "multiplicative"])
        
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                prophet_df = df[[date_col, metric_col]].rename(columns={date_col: "ds", metric_col: "y"})
                prophet_df = prophet_df.dropna()
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                model = Prophet(seasonality_mode=seasonality_mode)
                model.fit(prophet_df)
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                future = model.make_future_dataframe(periods=forecast_period)
                forecast = model.predict(future)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                fig1 = go.Figure()
                fig1.add_trace(go.Scatter(
                    x=forecast['ds'],
                    y=forecast['yhat'],
                    name="–ü—Ä–æ–≥–Ω–æ–∑",
                    line=dict(color='royalblue', width=3)
                ))
                fig1.add_trace(go.Scatter(
                    x=prophet_df['ds'],
                    y=prophet_df['y'],
                    name="–§–∞–∫—Ç",
                    mode='markers',
                    marker=dict(color='red')
                ))
                fig1.update_layout(
                    title=f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ '{metric_col}'",
                    xaxis_title="–î–∞—Ç–∞",
                    yaxis_title=metric_col
                )
                st.plotly_chart(fig1, use_container_width=True)
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                fig2 = model.plot_components(forecast)
                st.pyplot(fig2)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (CSV, –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏–ª–∏ CallTouch).")
