import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import requests
import json
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –î–∞—à–±–æ—Ä–¥ | primepark-lynx", 
    page_icon="üìä", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
CLIENT_LOGIN = "primepark-lynx"
TOKEN = "y0__xDUjbv7BxjcvTYgyK3Q1BL49Fo8XkTMl71y6FccfvfIbzpRxw"
BASE_URL = "https://api.direct.yandex.com/json/v5/"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    "Authorization": f"Bearer {TOKEN}",
    "Client-Login": CLIENT_LOGIN,
    "Accept-Language": "ru",
    "Content-Type": "application/json"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
def get_campaigns():
    body = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Id", "Name", "Status", "Type", "StartDate", "EndDate"],
        }
    }
    
    response = requests.post(
        f"{BASE_URL}campaigns",
        headers=HEADERS,
        json=body
    )
    
    if response.status_code == 200:
        return response.json().get("result", {}).get("Campaigns", [])
    else:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π: {response.text}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_statistics(date_from, date_to, campaign_ids=None):
    selection_criteria = {
        "DateFrom": date_from.strftime("%Y-%m-%d"),
        "DateTo": date_to.strftime("%Y-%m-%d")
    }
    
    if campaign_ids:
        selection_criteria["CampaignIds"] = campaign_ids
    
    body = {
        "params": {
            "SelectionCriteria": selection_criteria,
            "FieldNames": ["Date", "CampaignId", "CampaignName", "Clicks", "Impressions", "Cost", "Ctr"],
            "ReportName": "Campaign Performance",
            "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
            "DateRangeType": "CUSTOM_DATE",
            "Format": "TSV",
            "IncludeVAT": "YES",
            "IncludeDiscount": "NO"
        }
    }
    
    response = requests.post(
        f"{BASE_URL}reports",
        headers=HEADERS,
        json=body
    )
    
    if response.status_code == 200:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TSV –≤ DataFrame
        data = StringIO(response.text)
        df = pd.read_csv(data, sep='\t')
        return df
    else:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title(f"üìä –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –î–∞—à–±–æ—Ä–¥ | {CLIENT_LOGIN}")

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–∞")
    
    # –í—ã–±–æ—Ä –¥–∞—Ç
    default_end = datetime.now()
    default_start = default_end - timedelta(days=30)
    
    date_from = st.date_input(
        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", 
        default_start,
        key="date_from"
    )
    date_to = st.date_input(
        "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", 
        default_end,
        key="date_to"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    st.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    try:
        campaigns = get_campaigns()
        campaign_options = {c["Name"]: c["Id"] for c in campaigns}
        
        selected_names = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏",
            options=list(campaign_options.keys()),
            default=list(campaign_options.keys())[:3] if campaign_options else []
        )
        selected_ids = [campaign_options[name] for name in selected_names]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–º–ø–∞–Ω–∏–π: {str(e)}")
        selected_ids = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
try:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç..."):
        df = get_statistics(date_from, date_to, selected_ids if selected_ids else None)
        
        if df.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            st.stop()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df["Date"] = pd.to_datetime(df["Date"])
        df["CTR"] = df["Ctr"] * 100
        df["CPC"] = df.apply(lambda x: x["Cost"] / x["Clicks"] if x["Clicks"] > 0 else 0, axis=1)
        df.rename(columns={
            "CampaignName": "Campaign",
            "Ctr": "CTR_raw"
        }, inplace=True)

    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    kpi1, kpi2, kpi3, kpi4 = st.columns(4)
    
    total_clicks = df["Clicks"].sum()
    total_impressions = df["Impressions"].sum()
    total_cost = df["Cost"].sum()
    avg_ctr = (df["Clicks"].sum() / df["Impressions"].sum() * 100) if df["Impressions"].sum() > 0 else 0
    
    kpi1.metric(
        label="–û–±—â–∏–µ –∫–ª–∏–∫–∏", 
        value=f"{total_clicks:,}",
        delta=f"{total_clicks/len(df['Date'].unique()):.0f} –≤ –¥–µ–Ω—å"
    )
    kpi2.metric(
        label="–û–±—â–∏–µ –ø–æ–∫–∞–∑—ã", 
        value=f"{total_impressions:,}",
        delta=f"{total_impressions/len(df['Date'].unique()):,.0f} –≤ –¥–µ–Ω—å"
    )
    kpi3.metric(
        label="–û–±—â–∏–π –±—é–¥–∂–µ—Ç", 
        value=f"{total_cost:,.0f} ‚ÇΩ",
        delta=f"{total_cost/len(df['Date'].unique()):,.0f} ‚ÇΩ –≤ –¥–µ–Ω—å"
    )
    kpi4.metric(
        label="–°—Ä–µ–¥–Ω–∏–π CTR", 
        value=f"{avg_ctr:.2f}%",
        delta=f"{avg_ctr - (df[df['Date'] < df['Date'].max()]['Clicks'].sum() / df[df['Date'] < df['Date'].max()]['Impressions'].sum() * 100 if df[df['Date'] < df['Date'].max()]['Impressions'].sum() > 0 else 0):.2f}%"
    )

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∏–Ω–∞–º–∏–∫–∞", "üîÑ CTR", "üí∞ –†–∞—Å—Ö–æ–¥—ã", "üìã –î–∞–Ω–Ω—ã–µ"])

    with tab1:
        fig = px.line(
            df.groupby('Date').agg({
                'Clicks': 'sum',
                'Impressions': 'sum'
            }).reset_index(),
            x='Date',
            y=['Clicks', 'Impressions'],
            title='–î–∏–Ω–∞–º–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –∏ –ø–æ–∫–∞–∑–æ–≤',
            labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'variable': '–ú–µ—Ç—Ä–∏–∫–∞'},
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)

    with tab2:
        col1, col2 = st.columns(2)
        with col1:
            fig_ctr = px.line(
                df.groupby('Date')['CTR'].mean().reset_index(),
                x='Date',
                y='CTR',
                title='–°—Ä–µ–¥–Ω–∏–π CTR –ø–æ –¥–Ω—è–º',
                labels={'CTR': 'CTR (%)'},
                height=400
            )
            st.plotly_chart(fig_ctr, use_container_width=True)
        
        with col2:
            fig_ctr_campaign = px.bar(
                df.groupby('Campaign')['CTR'].mean().sort_values().reset_index(),
                x='CTR',
                y='Campaign',
                orientation='h',
                title='CTR –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º (—Å—Ä–µ–¥–Ω–∏–π)',
                labels={'CTR': 'CTR (%)'},
                height=400
            )
            st.plotly_chart(fig_ctr_campaign, use_container_width=True)

    with tab3:
        fig_cost = px.area(
            df.groupby(['Date', 'Campaign'])['Cost'].sum().reset_index(),
            x='Date',
            y='Cost',
            color='Campaign',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º',
            labels={'Cost': '–†–∞—Å—Ö–æ–¥—ã (‚ÇΩ)'},
            height=500
        )
        st.plotly_chart(fig_cost, use_container_width=True)

    with tab4:
        st.dataframe(
            df.sort_values(['Date', 'Campaign'])[['Date', 'Campaign', 'Clicks', 'Impressions', 'Cost', 'CTR', 'CPC']],
            column_config={
                "Date": st.column_config.DateColumn("–î–∞—Ç–∞"),
                "Cost": st.column_config.NumberColumn("–†–∞—Å—Ö–æ–¥—ã", format="%.0f ‚ÇΩ"),
                "CTR": st.column_config.NumberColumn("CTR", format="%.2f%%"),
                "CPC": st.column_config.NumberColumn("CPC", format="%.2f ‚ÇΩ")
            },
            hide_index=True,
            use_container_width=True
        )

except Exception as e:
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# Footer
st.markdown("---")
st.markdown(f"""
    **–ê–∫–∫–∞—É–Ω—Ç:** {CLIENT_LOGIN}  
    **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
""")
