import streamlit as st
import pandas as pd
from prophet import Prophet
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["CSV", "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç", "CallTouch"]
)

df = None

if data_source == "CSV":
    uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

elif data_source == "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç":
    st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
    yandex_token = st.sidebar.text_input("OAuth-—Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å")
    client_id = st.sidebar.text_input("ID –∫–ª–∏–µ–Ω—Ç–∞")
    date_from = st.sidebar.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime.now() - timedelta(days=30))
    date_to = st.sidebar.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.now())

    if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"):
        if yandex_token and client_id:
            url = "https://api.direct.yandex.com/json/v5/reports"
            headers = {
                "Authorization": f"Bearer {yandex_token}",
                "Client-Login": client_id,
                "Accept-Language": "ru"
            }
            body = {
                "params": {
                    "SelectionCriteria": {
                        "DateFrom": date_from.strftime("%Y-%m-%d"),
                        "DateTo": date_to.strftime("%Y-%m-%d")
                    },
                    "FieldNames": ["Date", "Clicks", "Cost", "Impressions", "Conversions"],
                    "ReportName": "Yandex Direct Report",
                    "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
                    "DateRangeType": "CUSTOM_DATE",
                    "Format": "TSV",
                    "IncludeVAT": "YES"
                }
            }
            response = requests.post(url, headers=headers, json=body)
            if response.status_code == 200:
                data = response.text.split("\n")
                df = pd.read_csv(pd.compat.StringIO("\n".join(data[1:-2])), sep="\t")
                df["Date"] = pd.to_datetime(df["Date"])
                st.success("–î–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ ID –∫–ª–∏–µ–Ω—Ç–∞!")

elif data_source == "CallTouch":
    st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API CallTouch")
    calltouch_api_key = st.sidebar.text_input("API-–∫–ª—é—á CallTouch")
    calltouch_date_from = st.sidebar.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (CallTouch)", datetime.now() - timedelta(days=30))
    calltouch_date_to = st.sidebar.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (CallTouch)", datetime.now())

    if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CallTouch"):
        if calltouch_api_key:
            url = f"https://api.calltouch.ru/calls-service/RestAPI/{calltouch_api_key}/calls-diary/calls"
            params = {
                "clientIds": "all",
                "dateFrom": calltouch_date_from.strftime("%Y-%m-%d"),
                "dateTo": calltouch_date_to.strftime("%Y-%m-%d"),
                "page": 1,
                "limit": 1000
            }
            response = requests.get(url, params=params)
            if response.status_code == 200:
                calls_data = response.json()
                df = pd.DataFrame(calls_data["records"])
                df["callDate"] = pd.to_datetime(df["callDate"])
                st.success("–î–∞–Ω–Ω—ã–µ –∏–∑ CallTouch –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                st.error(f"–û—à–∏–±–∫–∞ API CallTouch: {response.text}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á CallTouch!")

# --- 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö ---
if df is not None:
    st.subheader("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    st.write(df.head())

    # --- 3. –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    metric_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", df.select_dtypes(include="number").columns)
    date_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π", df.select_dtypes(include="datetime").columns)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet
    prophet_df = df[[date_col, metric_col]].rename(columns={date_col: "ds", metric_col: "y"})

    # --- 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ ---
    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
    forecast_period = st.sidebar.number_input("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–∏)", 1, 365, 30)
    seasonality_mode = st.sidebar.selectbox("–†–µ–∂–∏–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", ["additive", "multiplicative"])

    if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        model = Prophet(seasonality_mode=seasonality_mode)
        model.fit(prophet_df)
        future = model.make_future_dataframe(periods=forecast_period)
        forecast = model.predict(future)

        # --- 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=forecast["ds"], y=forecast["yhat"], name="–ü—Ä–æ–≥–Ω–æ–∑"))
        fig.add_trace(go.Scatter(x=prophet_df["ds"], y=prophet_df["y"], name="–§–∞–∫—Ç", mode="markers"))
        st.plotly_chart(fig, use_container_width=True)

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.subheader("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        fig2 = model.plot_components(forecast)
        st.pyplot(fig2)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (CSV, –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏–ª–∏ CallTouch).")
