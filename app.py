import streamlit as st
import re
from collections import Counter
import pandas as pd
import hashlib
import base64
import io
import chardet
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    page_icon="üîß",
    layout="wide"
)

# ===== –ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–º =====
def check_password():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    def password_entered():
        if st.session_state["password"] == "gusev2025":
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", 
            type="password", 
            on_change=password_entered, 
            key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", 
            type="password", 
            on_change=password_entered, 
            key="password"
        )
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return False
    else:
        return True

if not check_password():
    st.stop()  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ, –ø–æ–∫–∞ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω

# ===== –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω—É—Å-—Å–ª–æ–≤ =====
def normalize_word(word, force_exact=False):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ pymorphy3"""
    word = word.lower().strip('!') if force_exact or word.startswith('!') else word.lower()
    # –ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    if word.endswith(('–æ–º', '–µ–º', '–æ–π', '–µ–π', '–∞–º–∏', '—è–º–∏')):
        return word[:-2]
    if word.endswith(('—ã', '–∏', '–∞', '—è', '—É', '—é')):
        return word[:-1]
    return word

def parse_exclude_input(user_input):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if not user_input:
        return []
    if '\n' in user_input:
        return [line.strip() for line in user_input.split('\n') if line.strip()]
    if '|' in user_input:
        return [item.strip() for item in user_input.split('|') if item.strip()]
    return [item.strip() for item in user_input.split(',') if item.strip()]

def get_exclusion_patterns(exclude_list):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    patterns = []
    for item in exclude_list:
        item = item.strip()
        if not item:
            continue
        if item.startswith('/') and item.endswith('/'):
            patterns.append((item[1:-1], True))
            continue
            
        force_exact = item.startswith('!')
        if force_exact:
            item = item[1:]
            
        if '*' in item:
            pattern = r'\b' + re.escape(item).replace(r'\*', r'\w*') + r'\b'
            patterns.append((pattern, False))
        else:
            normalized = normalize_word(item, force_exact)
            pattern = r'\b' + re.escape(normalized) + r'\b'
            patterns.append((pattern, False))
    return patterns

def should_exclude(word, exclude_patterns):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"""
    word_lower = word.lower()
    for pattern, is_regex in exclude_patterns:
        try:
            if is_regex or '*' in pattern:
                if re.search(pattern, word_lower, re.IGNORECASE):
                    return True
            else:
                if re.fullmatch(pattern, word_lower, re.IGNORECASE):
                    return True
        except re.error:
            continue
    return False

def process_phrases(phrases, exclude_patterns, min_word_length=3):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑"""
    words_counter = Counter()
    for phrase in phrases:
        words = re.findall(r'\b\w+\b', phrase.lower())
        for word in words:
            if len(word) >= min_word_length and not should_exclude(word, exclude_patterns):
                normalized = normalize_word(word)
                words_counter[normalized] += 1
    return sorted(words_counter.keys(), key=lambda x: (-words_counter[x], x))

# ===== –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2: –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ =====
def hash_phone(phone):
    """–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    digits = re.sub(r'\D', '', str(phone))
    return hashlib.sha256(digits.encode()).hexdigest() if digits else ""

def read_uploaded_file(uploaded_file):
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CSV –∏ Excel"""
    try:
        if uploaded_file.name.endswith('.csv'):
            # –î–ª—è CSV –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            content = uploaded_file.getvalue()
            result = chardet.detect(content)
            encoding = result['encoding'] if result['confidence'] > 0.7 else 'utf-8'
            uploaded_file.seek(0)
            return pd.read_csv(uploaded_file, encoding=encoding)
        
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            # –î–ª—è Excel –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV
            st.warning("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –∫–∞–∫ CSV –≤ Excel")
            st.info("–ö–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: –§–∞–π–ª ‚Üí –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ ‚Üí CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ - –∑–∞–ø—è—Ç—ã–µ)")
            return None
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

def get_table_download_link(df):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    csv = df.to_csv(index=False).encode('utf-8-sig')
    b64 = base64.b64encode(csv).decode()
    return f'<a href="data:file/csv;base64,{b64}" download="result.csv">–°–∫–∞—á–∞—Ç—å CSV</a>'

# ===== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å =====
st.title("üîí –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)")
st.markdown("---")

tool = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
    ["–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω—É—Å-—Å–ª–æ–≤", "–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"]
)

if tool == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω—É—Å-—Å–ª–æ–≤":
    st.header("üìâ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω—É—Å-—Å–ª–æ–≤")
    
    col1, col2 = st.columns(2)
    with col1:
        phrases = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            height=200,
            help="–§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–º–∏–Ω—É—Å–æ–≤–∞—Ç—å"
        )
    
    with col2:
        exclude = st.text_area(
            "–ò—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ |)",
            height=200,
            help="–ü—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–æ1, (–≤–∞—Ä–∏–∞–Ω—Ç1|–≤–∞—Ä–∏–∞–Ω—Ç2), !—Ç–æ—á–Ω–æ–µ, –º–∞—Å–∫–∞*"
        )
    
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
        if phrases:
            exclude_list = parse_exclude_input(exclude)
            exclude_patterns = get_exclusion_patterns(exclude_list)
            phrases_list = [p.strip() for p in phrases.split('\n') if p.strip()]
            minus_words = process_phrases(phrases_list, exclude_patterns)
            
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            st.code(" ".join([f"-{word}" for word in minus_words]))
            st.info(f"–ù–∞–π–¥–µ–Ω–æ {len(minus_words)} –º–∏–Ω—É—Å-—Å–ª–æ–≤")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

elif tool == "–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤":
    st.header("üìû –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=["csv"],
        help="Excel-—Ñ–∞–π–ª—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ CSV"
    )
    
    if uploaded_file:
        df = read_uploaded_file(uploaded_file)
        if df is not None:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            col1, col2 = st.columns(2)
            with col1:
                st.dataframe(df.head())
            
            with col2:
                phone_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏", df.columns)
                new_col = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —Å —Ö—ç—à–∞–º–∏", "phone_hash")
                
                if st.button("–•—ç—à–∏—Ä–æ–≤–∞—Ç—å"):
                    df[new_col] = df[phone_col].apply(hash_phone)
                    st.success("–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–º–µ—Ä:")
                    st.dataframe(df.head())
                    st.markdown(get_table_download_link(df), unsafe_allow_html=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("–í–µ—Ä—Å–∏—è 2.0 | ¬© 2024 | –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
