import streamlit as st
import pandas as pd
from prophet import Prophet
import plotly.graph_objects as go
from datetime import datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def make_forecast(df, date_col, metric_col, periods):
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet
        prophet_df = df[[date_col, metric_col]].rename(columns={date_col: "ds", metric_col: "y"})
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = Prophet()
        model.fit(prophet_df)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –¥–∞—Ç
        future = model.make_future_dataframe(periods=periods)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecast = model.predict(future)
        
        return model, forecast
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
        return None, None

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["CSV", "–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç", "CallTouch"]
)

df = None

if data_source == "CSV":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
            df = pd.read_csv(uploaded_file)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π
            date_cols = [col for col in df.columns if 'date' in col.lower() or '–¥–∞—Ç–∞' in col.lower()]
            date_col = date_cols[0] if date_cols else df.columns[0]
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
            
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head())
            
            # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
            date_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π", df.columns, index=df.columns.get_loc(date_col))
            metric_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", numeric_cols)
            periods = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", min_value=1, max_value=365, value=30)
            
            if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
                with st.spinner('–°—Ç—Ä–æ–∏–º –ø—Ä–æ–≥–Ω–æ–∑...'):
                    model, forecast = make_forecast(df, date_col, metric_col, periods)
                    
                    if model is not None:
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        fig1 = go.Figure()
                        fig1.add_trace(go.Scatter(
                            x=forecast['ds'],
                            y=forecast['yhat'],
                            name='–ü—Ä–æ–≥–Ω–æ–∑',
                            line=dict(color='blue')
                        ))
                        fig1.add_trace(go.Scatter(
                            x=df[date_col],
                            y=df[metric_col],
                            name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                            mode='markers',
                            marker=dict(color='red')
                        ))
                        fig1.update_layout(
                            title=f'–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ "{metric_col}"',
                            xaxis_title='–î–∞—Ç–∞',
                            yaxis_title=metric_col
                        )
                        st.plotly_chart(fig1, use_container_width=True)
                        
                        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                        st.subheader("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        fig2 = model.plot_components(forecast)
                        st.pyplot(fig2)
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        csv = forecast.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ CSV",
                            data=csv,
                            file_name='forecast.csv',
                            mime='text/csv'
                        )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏ CallTouch)
